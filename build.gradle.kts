// This is to suppress false warnings generated by a bug in IntelliJ
@file:Suppress("DSL_SCOPE_VIOLATION", "MISSING_DEPENDENCY_CLASS", "FUNCTION_CALL_EXPECTED", "PropertyName")

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    java
    `maven-publish`

    alias(libs.plugins.kotlin)
    alias(libs.plugins.quilt.loom)
    alias(libs.plugins.lombok)
    alias(libs.plugins.minotaur)
}

val modID = project.properties["archives_base_name"].toString()
val version = "${project.version}+${libs.versions.minecraft.get()}"
val group = project.properties["maven_group"].toString()

val javaVersion = JavaVersion.VERSION_17

repositories {
    maven {
        name = "Mod Menu"
        url = uri("https://maven.terraformersmc.com/releases/")
    }
}

dependencies {
    minecraft(libs.minecraft)
    mappings(variantOf(libs.quilt.mappings) { classifier("intermediary-v2") })

    modImplementation(libs.quilt.loader)

    modImplementation(libs.quilt.kotlin.libaries)
    modImplementation(libs.quilted.fabric.api)

    modImplementation(libs.mod.menu)
}

tasks {
    withType<KotlinCompile> {
        kotlinOptions {
            jvmTarget = javaVersion.toString()
            languageVersion = libs.plugins.kotlin.get().version.requiredVersion.substringBeforeLast('.')
        }
    }

    withType<JavaCompile>.configureEach {
        options.encoding = "UTF-8"
        options.isDeprecation = true
        options.release.set(javaVersion.asInt)
    }

    processResources {
        filteringCharset = "UTF-8"
        inputs.property("version", version)

        filesMatching("quilt.mod.json") {
            expand(
                mapOf(
                    "version" to version
                )
            )
        }
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    wrapper {
        distributionType = Wrapper.DistributionType.BIN
    }

    jar {
        from("LICENSE.md") {
            rename { "${it}_${modID}" }
        }
    }
}

if (JavaVersion.current() < javaVersion) {
    kotlin.jvmToolchain(javaVersion.asInt)

    java.toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion.asInt))
    }
}

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    withSourcesJar()
    withJavadocJar()
}

modrinth {
    token.set(System.getenv("MODRINTH_TOKEN"))
    projectId.set(modID)
    versionNumber.set(version.substringBefore('+'))
    versionType.set(System.getenv("MODRINTH_TYPE"))
    uploadFile.set(tasks.remapJar)
    gameVersions.add("1.19.4")
    loaders.add("quilt")

    dependencies {
        required.version("qkl", libs.versions.quilt.kotlin.libraries.get())
        required.version("qsl", libs.versions.quilted.fabric.api.get())
        optional.version("modmenu", libs.versions.mod.menu.get())
    }

    syncBodyFrom.set(rootProject.file("README.md").readText())
}

val JavaVersion.asInt: Int
    get() = ordinal + 1
